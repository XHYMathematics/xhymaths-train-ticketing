-- DROP TABLE IF EXISTS SUPER_ADMIN_PASSWORD, ACCOUNTS, TRAINS, TRAIN_STOPS, TRAIN_SEATS, ORDERS, BALANCE_CHANGES;
-- DROP VIEW IF EXISTS VTRAIN_STOPS, VTRAIN_SEGMENTS, VORDERS;
-- DROP PROCEDURE IF EXISTS CHANGE_BALANCE;

CREATE TABLE SUPER_ADMIN_PASSWORD
(
    PASSWORD VARCHAR(128) PRIMARY KEY
);
CREATE TABLE ACCOUNTS
(
    USERNAME VARCHAR(30) PRIMARY KEY,
    PASSWORD VARCHAR(128) NOT NULL,
    ACTYPE TINYINT NOT NULL,
    BALANCE DECIMAL(16,2) DEFAULT NULL
);
CREATE TABLE TRAINS
(
    TDATE DATE,
    TNUMBER VARCHAR(6),
    PRIMARY KEY (TDATE, TNUMBER)
);
CREATE TABLE TRAIN_STOPS
(
    TDATE DATE,
    TNUMBER VARCHAR(6),
    STOPNO TINYINT,
    STATION_NAME VARCHAR(30) NOT NULL,
    ARRIVAL_DAY TINYINT NOT NULL,
    ARRIVAL_TIME TIME,
    DEPARTURE_TIME TIME,
    DIST_PREFSUM INT NOT NULL,
    SEATS0 VARBINARY(256) DEFAULT NULL,
    SEATS1 VARBINARY(256) DEFAULT NULL,
    SEATS2 VARBINARY(256) DEFAULT NULL,
    SEATS3 VARBINARY(128) DEFAULT NULL,
    PRIMARY KEY (TDATE, TNUMBER, STOPNO),
    UNIQUE (TDATE, TNUMBER, STATION_NAME),
    FOREIGN KEY (TDATE, TNUMBER) REFERENCES TRAINS (TDATE, TNUMBER) ON DELETE CASCADE
);
CREATE TABLE TRAIN_SEATS
(
    TDATE DATE,
    TNUMBER VARCHAR(6),
    CARNO TINYINT,
    SEAT_PREFSUM SMALLINT NOT NULL,
    SEAT_TYPE TINYINT NOT NULL COMMENT '0: 硬/二等座, 1: 软/一等座, 2: 硬/二等卧, 3: 软/一等卧',
    PRIMARY KEY (TDATE, TNUMBER, CARNO),
    FOREIGN KEY (TDATE, TNUMBER) REFERENCES TRAINS (TDATE, TNUMBER) ON DELETE CASCADE
);
CREATE TABLE ORDERS
(
    ORDERNO INT PRIMARY KEY AUTO_INCREMENT,
    USERNAME VARCHAR(30),
    TDATE DATE,
    TNUMBER VARCHAR(6),
    BEGIN_STOPNO TINYINT NOT NULL,
    END_STOPNO TINYINT NOT NULL,
    CARNO TINYINT NOT NULL,
    SEATNO SMALLINT NOT NULL,
    SEAT_TYPE TINYINT NOT NULL,
    AMOUNT DECIMAL(16,2) NOT NULL,
    ORDER_TIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    STATUS TINYINT NOT NULL DEFAULT 0 COMMENT '0: 已支付, 1: 已退款',
    FOREIGN KEY (USERNAME) REFERENCES ACCOUNTS (USERNAME),
    FOREIGN KEY (TDATE, TNUMBER, BEGIN_STOPNO) REFERENCES TRAIN_STOPS (TDATE, TNUMBER, STOPNO),
    FOREIGN KEY (TDATE, TNUMBER, END_STOPNO) REFERENCES TRAIN_STOPS (TDATE, TNUMBER, STOPNO),
    CHECK (BEGIN_STOPNO < END_STOPNO),
    FOREIGN KEY (TDATE, TNUMBER, CARNO) REFERENCES TRAIN_SEATS (TDATE, TNUMBER, CARNO)
);
CREATE TABLE BALANCE_CHANGES
(
    CHANGENO INT PRIMARY KEY AUTO_INCREMENT,
    USERNAME VARCHAR(30),
    AMOUNT DECIMAL(16,2) NOT NULL,
    CHANGE_TIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CHANGE_TYPE TINYINT NOT NULL COMMENT '0: 充值, 1: 消费, 2: 退款',
    ORDERNO INT,
    FOREIGN KEY (USERNAME) REFERENCES ACCOUNTS (USERNAME),
    FOREIGN KEY (ORDERNO) REFERENCES ORDERS (ORDERNO)
);

CREATE VIEW VTRAIN_STOPS AS
SELECT
    TS.*,
    (TIMESTAMPDIFF(MINUTE, TS.ARRIVAL_TIME, TS.DEPARTURE_TIME) + 1440) MOD 1440 AS TIME_INTERVAL,
    TS.ARRIVAL_DAY + (TS.ARRIVAL_TIME IS NOT NULL AND TS.ARRIVAL_TIME > TS.DEPARTURE_TIME) AS DEPARTURE_DAY,
    DATE_ADD(TS.TDATE, INTERVAL TS.ARRIVAL_DAY DAY) T_ARRIVAL_DATE,
    DATE_ADD(TS.TDATE, INTERVAL TS.ARRIVAL_DAY + (TS.ARRIVAL_TIME IS NOT NULL AND TS.ARRIVAL_TIME > TS.DEPARTURE_TIME) DAY) T_DEPARTURE_DATE,
    DATE_ADD(DATE_ADD(TS.TDATE, INTERVAL TS.ARRIVAL_DAY DAY), INTERVAL TS.ARRIVAL_TIME HOUR_SECOND) T_ARRIVAL_DATETIME,
    DATE_ADD(DATE_ADD(TS.TDATE, INTERVAL TS.ARRIVAL_DAY + (TS.ARRIVAL_TIME IS NOT NULL AND TS.ARRIVAL_TIME > TS.DEPARTURE_TIME) DAY), INTERVAL TS.DEPARTURE_TIME HOUR_SECOND) T_DEPARTURE_DATETIME
FROM TRAIN_STOPS TS;

CREATE VIEW VTRAIN_SEGMENTS AS
SELECT
    TS1.T_DEPARTURE_DATE,
    TS1.TNUMBER,
    TS1.STATION_NAME BEGIN_STATION_NAME,
    TS2.STATION_NAME END_STATION_NAME,
    DATE_FORMAT(TS1.DEPARTURE_TIME, '%H:%i') DEPARTURE_TIME,
    DATE_FORMAT(TS2.ARRIVAL_TIME, '%H:%i') ARRIVAL_TIME,
    TS2.ARRIVAL_DAY - TS1.DEPARTURE_DAY DAY_DIFF,
    TIME_FORMAT(TIMEDIFF(TS2.T_ARRIVAL_DATETIME, TS1.T_DEPARTURE_DATETIME), '%H:%i') DURATION,
    TS1.TDATE,
    TS1.STOPNO BEGIN_STOPNO,
    TS2.STOPNO END_STOPNO,
    TS2.DIST_PREFSUM - TS1.DIST_PREFSUM DISTANCE,
    TS1.T_DEPARTURE_DATETIME
FROM VTRAIN_STOPS TS1 JOIN VTRAIN_STOPS TS2
ON TS1.TDATE = TS2.TDATE AND TS1.TNUMBER = TS2.TNUMBER
WHERE TS1.STOPNO < TS2.STOPNO;

CREATE VIEW VORDERS AS
SELECT
    O.*,
    TS.T_DEPARTURE_DATE,
    TS.BEGIN_STATION_NAME,
    TS.END_STATION_NAME,
    TS.DEPARTURE_TIME,
    TS.ARRIVAL_TIME,
    TS.DAY_DIFF,
    TS.DURATION,
    (T_DEPARTURE_DATETIME <= CURRENT_TIMESTAMP OR STATUS = 1) HISTORY
FROM
(
    ORDERS O JOIN VTRAIN_SEGMENTS TS
    ON
        O.TDATE = TS.TDATE
        AND O.TNUMBER = TS.TNUMBER
        AND O.BEGIN_STOPNO = TS.BEGIN_STOPNO
        AND O.END_STOPNO = TS.END_STOPNO
);

DELIMITER //
CREATE PROCEDURE CHANGE_BALANCE
(
    IN _USERNAME VARCHAR(30),
    IN _AMOUNT DECIMAL(16,2),
    IN _CHANGE_TYPE TINYINT,
    IN _ORDERNO INT
)
BEGIN
    IF _CHANGE_TYPE = 0 THEN
        UPDATE ACCOUNTS
        SET BALANCE = BALANCE + _AMOUNT
        WHERE USERNAME = _USERNAME;
        INSERT INTO BALANCE_CHANGES (USERNAME, AMOUNT, CHANGE_TYPE)
        VALUES (_USERNAME, _AMOUNT, _CHANGE_TYPE);
    ELSEIF _CHANGE_TYPE = 1 THEN
        UPDATE ACCOUNTS
        SET BALANCE = BALANCE - _AMOUNT
        WHERE USERNAME = _USERNAME;
        INSERT INTO BALANCE_CHANGES (USERNAME, AMOUNT, CHANGE_TYPE, ORDERNO)
        VALUES (_USERNAME, -_AMOUNT, _CHANGE_TYPE, _ORDERNO);
    ELSEIF _CHANGE_TYPE = 2 THEN
        UPDATE ACCOUNTS
        SET BALANCE = BALANCE + _AMOUNT
        WHERE USERNAME = _USERNAME;
        INSERT INTO BALANCE_CHANGES (USERNAME, AMOUNT, CHANGE_TYPE, ORDERNO)
        VALUES (_USERNAME, _AMOUNT, _CHANGE_TYPE, _ORDERNO);
    END IF;
    COMMIT;
END //
DELIMITER ;
